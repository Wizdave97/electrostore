{"version":3,"sources":["../node_modules/form-serialize/index.js","utils/Utility.js","containers/Auth/styles.js","containers/Auth/Auth.js"],"names":["k_r_submitter","k_r_success_contrls","brackets","hash_serializer","result","key","value","match","hash_assign","keys","length","shift","between","Array","isArray","push","_values","string","index","isNaN","children","RegExp","exec","parse_keys","existing","str_serialize","replace","encodeURIComponent","module","exports","form","options","hash","undefined","serializer","elements","radio_store","Object","create","i","element","disabled","name","test","nodeName","type","val","checked","empty","selectOptions","isSelectedOptions","j","option","allowedEmpty","hasValue","selected","slice","hasError","validity","valid","valueMissing","typeMismatch","tooShort","patternMismatch","showError","errorStatus","classList","add","setAttribute","id","message","document","getElementById","textContent","parentElement","insertAdjacentHTML","concat","removeError","remove","removeAttribute","parentNode","removeChild","styles","theme","container","display","auth","width","flexWrap","alignSelf","authForm","boxSizing","padding","paper","logoContainer","& div","margin","transform","& img","height","heading","authDetails","textField","marginBottom","spacing","unit","button","authState","Auth","state","isSignUp","authData","changeSignUpState","_this","setState","validityChecker","e","error","target","submitAuthForm","event","preventDefault","querySelector","formData","formSerialize","objectSpread","returnSecureToken","checkValidity","inputs","from","querySelectorAll","_i","_inputs","input","_i2","_inputs2","focus","props","onSubmitAuth","this","updateCurrentView","prevState","nextState","addEventListener","removeEventListener","_i3","_inputs3","_this2","classes","react_default","a","createElement","react","index_es","className","noValidate","onSubmit","src","Logo","alt","variant","color","align","gutterBottom","required","label","autoComplete","fullWidth","inputProps","pattern","minLength","size","style","onClick","loading","Spinner","errorMessage","Fragment","success","react_router","to","item","xs","sm","md","Component","connect","dispatch","actions","withStyles"],"mappings":"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","file":"static/js/5.89f87ff1.chunk.js","sourcesContent":["// get successful control from form and assemble into object\n// http://www.w3.org/TR/html401/interact/forms.html#h-17.13.2\n// types which indicate a submit action and are not successful controls\n// these will be ignored\nvar k_r_submitter = /^(?:submit|button|image|reset|file)$/i; // node names which could be successful controls\n\nvar k_r_success_contrls = /^(?:input|select|textarea|keygen)/i; // Matches bracket notation.\n\nvar brackets = /(\\[[^\\[\\]]*\\])/g; // serializes form fields\n// @param form MUST be an HTMLForm element\n// @param options is an optional argument to configure the serialization. Default output\n// with no options specified is a url encoded string\n//    - hash: [true | false] Configure the output type. If true, the output will\n//    be a js object.\n//    - serializer: [function] Optional serializer function to override the default one.\n//    The function takes 3 arguments (result, key, value) and should return new result\n//    hash and url encoded str serializers are provided with this module\n//    - disabled: [true | false]. If true serialize disabled fields.\n//    - empty: [true | false]. If true serialize empty fields\n\nfunction serialize(form, options) {\n  if (typeof options != 'object') {\n    options = {\n      hash: !!options\n    };\n  } else if (options.hash === undefined) {\n    options.hash = true;\n  }\n\n  var result = options.hash ? {} : '';\n  var serializer = options.serializer || (options.hash ? hash_serializer : str_serialize);\n  var elements = form && form.elements ? form.elements : []; //Object store each radio and set if it's empty or not\n\n  var radio_store = Object.create(null);\n\n  for (var i = 0; i < elements.length; ++i) {\n    var element = elements[i]; // ingore disabled fields\n\n    if (!options.disabled && element.disabled || !element.name) {\n      continue;\n    } // ignore anyhting that is not considered a success field\n\n\n    if (!k_r_success_contrls.test(element.nodeName) || k_r_submitter.test(element.type)) {\n      continue;\n    }\n\n    var key = element.name;\n    var val = element.value; // we can't just use element.value for checkboxes cause some browsers lie to us\n    // they say \"on\" for value when the box isn't checked\n\n    if ((element.type === 'checkbox' || element.type === 'radio') && !element.checked) {\n      val = undefined;\n    } // If we want empty elements\n\n\n    if (options.empty) {\n      // for checkbox\n      if (element.type === 'checkbox' && !element.checked) {\n        val = '';\n      } // for radio\n\n\n      if (element.type === 'radio') {\n        if (!radio_store[element.name] && !element.checked) {\n          radio_store[element.name] = false;\n        } else if (element.checked) {\n          radio_store[element.name] = true;\n        }\n      } // if options empty is true, continue only if its radio\n\n\n      if (val == undefined && element.type == 'radio') {\n        continue;\n      }\n    } else {\n      // value-less fields are ignored unless options.empty is true\n      if (!val) {\n        continue;\n      }\n    } // multi select boxes\n\n\n    if (element.type === 'select-multiple') {\n      val = [];\n      var selectOptions = element.options;\n      var isSelectedOptions = false;\n\n      for (var j = 0; j < selectOptions.length; ++j) {\n        var option = selectOptions[j];\n        var allowedEmpty = options.empty && !option.value;\n        var hasValue = option.value || allowedEmpty;\n\n        if (option.selected && hasValue) {\n          isSelectedOptions = true; // If using a hash serializer be sure to add the\n          // correct notation for an array in the multi-select\n          // context. Here the name attribute on the select element\n          // might be missing the trailing bracket pair. Both names\n          // \"foo\" and \"foo[]\" should be arrays.\n\n          if (options.hash && key.slice(key.length - 2) !== '[]') {\n            result = serializer(result, key + '[]', option.value);\n          } else {\n            result = serializer(result, key, option.value);\n          }\n        }\n      } // Serialize if no selected options and options.empty is true\n\n\n      if (!isSelectedOptions && options.empty) {\n        result = serializer(result, key, '');\n      }\n\n      continue;\n    }\n\n    result = serializer(result, key, val);\n  } // Check for all empty radio buttons and serialize them with key=\"\"\n\n\n  if (options.empty) {\n    for (var key in radio_store) {\n      if (!radio_store[key]) {\n        result = serializer(result, key, '');\n      }\n    }\n  }\n\n  return result;\n}\n\nfunction parse_keys(string) {\n  var keys = [];\n  var prefix = /^([^\\[\\]]*)/;\n  var children = new RegExp(brackets);\n  var match = prefix.exec(string);\n\n  if (match[1]) {\n    keys.push(match[1]);\n  }\n\n  while ((match = children.exec(string)) !== null) {\n    keys.push(match[1]);\n  }\n\n  return keys;\n}\n\nfunction hash_assign(result, keys, value) {\n  if (keys.length === 0) {\n    result = value;\n    return result;\n  }\n\n  var key = keys.shift();\n  var between = key.match(/^\\[(.+?)\\]$/);\n\n  if (key === '[]') {\n    result = result || [];\n\n    if (Array.isArray(result)) {\n      result.push(hash_assign(null, keys, value));\n    } else {\n      // This might be the result of bad name attributes like \"[][foo]\",\n      // in this case the original `result` object will already be\n      // assigned to an object literal. Rather than coerce the object to\n      // an array, or cause an exception the attribute \"_values\" is\n      // assigned as an array.\n      result._values = result._values || [];\n\n      result._values.push(hash_assign(null, keys, value));\n    }\n\n    return result;\n  } // Key is an attribute name and can be assigned directly.\n\n\n  if (!between) {\n    result[key] = hash_assign(result[key], keys, value);\n  } else {\n    var string = between[1]; // +var converts the variable into a number\n    // better than parseInt because it doesn't truncate away trailing\n    // letters and actually fails if whole thing is not a number\n\n    var index = +string; // If the characters between the brackets is not a number it is an\n    // attribute name and can be assigned directly.\n\n    if (isNaN(index)) {\n      result = result || {};\n      result[string] = hash_assign(result[string], keys, value);\n    } else {\n      result = result || [];\n      result[index] = hash_assign(result[index], keys, value);\n    }\n  }\n\n  return result;\n} // Object/hash encoding serializer.\n\n\nfunction hash_serializer(result, key, value) {\n  var matches = key.match(brackets); // Has brackets? Use the recursive assignment function to walk the keys,\n  // construct any missing objects in the result tree and make the assignment\n  // at the end of the chain.\n\n  if (matches) {\n    var keys = parse_keys(key);\n    hash_assign(result, keys, value);\n  } else {\n    // Non bracket notation can make assignments directly.\n    var existing = result[key]; // If the value has been assigned already (for instance when a radio and\n    // a checkbox have the same name attribute) convert the previous value\n    // into an array before pushing into it.\n    //\n    // NOTE: If this requirement were removed all hash creation and\n    // assignment could go through `hash_assign`.\n\n    if (existing) {\n      if (!Array.isArray(existing)) {\n        result[key] = [existing];\n      }\n\n      result[key].push(value);\n    } else {\n      result[key] = value;\n    }\n  }\n\n  return result;\n} // urlform encoding serializer\n\n\nfunction str_serialize(result, key, value) {\n  // encode newlines as \\r\\n cause the html spec says so\n  value = value.replace(/(\\r)?\\n/g, '\\r\\n');\n  value = encodeURIComponent(value); // spaces should be '+' rather than '%20'.\n\n  value = value.replace(/%20/g, '+');\n  return result + (result ? '&' : '') + encodeURIComponent(key) + '=' + value;\n}\n\nmodule.exports = serialize;","\r\n  export const  hasError=(element)=>{\r\n    if(element.disabled || element.type === 'file' || element.type === 'reset' || element.type === 'submit' || element.type === 'button') return null\r\n    let validity=element.validity\r\n    if(validity.valid) return null\r\n    if(validity.valueMissing) return 'Please fill in this field'\r\n    if(element.type==='email'){\r\n      if(validity.typeMismatch) return 'Please enter an email address'\r\n    }\r\n    if(validity.tooShort) return 'Password should be atleast 8 chracters long'\r\n    if(validity.patternMismatch) {\r\n      return 'Please enter a valid email address'}\r\n    return null\r\n  }\r\n\r\n  export const  showError=(element,errorStatus)=>{\r\n      element.classList.add('error')\r\n      element.setAttribute('aria-describedby','errorMessagefor'+element.id)\r\n      let message=document.getElementById('errorMessagefor'+element.id)\r\n      if(message)  message.textContent=errorStatus\r\n      if(!message){\r\n        element.parentElement.insertAdjacentHTML('afterend',`<p class=\"errorText\" id=\"errorMessagefor${element.id}\">${errorStatus}</p>`)\r\n      }\r\n  }\r\n  export const  removeError=(element)=>{\r\n      element.classList.remove('error')\r\n      element.removeAttribute('aria-describedby')\r\n      let message=document.getElementById('errorMessagefor'+element.id)\r\n      if(message) message.parentNode.removeChild(message)\r\n  }\r\n","const styles = theme => ({\r\n  container:{\r\n    display:'flex'\r\n  },\r\n  auth:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    alignSelf:'center'\r\n  },\r\n  authForm:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    boxSizing:'border-box',\r\n    padding:'30px'\r\n  },\r\n  paper:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    padding:'40px',\r\n    boxSizing:'border-box'\r\n  },\r\n  form:{\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    width:'100%'\r\n  },\r\n  logoContainer:{\r\n    width:'100%',\r\n    display:'flex',\r\n    padding:'5px',\r\n    boxSizing:'border-box',\r\n    '& div':{\r\n      width:'30%',\r\n      margin:'0 auto',\r\n      transform:'rotate(30deg)',\r\n      '& img':{\r\n        width:'100%',\r\n        height:'auto'\r\n      }\r\n    }\r\n  },\r\n  heading:{\r\n    width:'100%',\r\n    padding:'5px',\r\n    boxSizing:'border-box',\r\n    display:'flex'\r\n  },\r\n  authDetails:{\r\n    width:'100%',\r\n    display:'flex',\r\n    flexWrap:'wrap',\r\n    boxSizing:'border-box',\r\n  },\r\n  textField:{\r\n    marginBottom:theme.spacing.unit\r\n  },\r\n  button:{\r\n    margin:`${theme.spacing.unit}px auto`\r\n  },\r\n  authState:{\r\n    display:'flex',\r\n    width:'100%',\r\n    flexWrap:'wrap'\r\n  }\r\n})\r\n\r\nexport default styles\r\n","import React, { Component, Fragment} from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Grid, Typography, TextField, Button, Paper} from '@material-ui/core';\r\nimport formSerialize from 'form-serialize';\r\nimport Logo from '../../logo.svg'\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport {hasError, showError, removeError } from '../../utils/Utility';\r\nimport styles from './styles'\r\nimport * as actions from '../../store/actions/authActions';\r\n\r\n\r\nconst emailPattern=`^([a-zA-Z0-9_\\\\-\\\\.]+)@((\\\\[[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.)|(([a-zA-Z0-9\\\\-]+\\\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\\\]?)$`\r\n class Auth extends Component {\r\n   state={\r\n     isSignUp:false,\r\n     authData:null\r\n   }\r\n   changeSignUpState= () =>{\r\n     this.setState(state=>({\r\n       isSignUp:!state.isSignUp\r\n     }))\r\n\r\n   }\r\n   componentDidMount() {\r\n     this.props.updateCurrentView('/auth')\r\n\r\n   }\r\n   componentDidUpdate(prevState,nextState) {\r\n     if(!nextState.isSignUp) {\r\n       document.addEventListener('blur',this.validityChecker,true)\r\n\r\n     }\r\n     if(nextState.isSignUp) {\r\n        document.removeEventListener('blur',this.validityChecker,true)\r\n        let inputs =Array.from(document.querySelectorAll('input'))\r\n        for(let input of inputs){\r\n          removeError(input)\r\n        }\r\n      }\r\n   }\r\n   componentWillUnmount() {\r\n     this.props.updateCurrentView('')\r\n     document.removeEventListener('blur',this.validityChecker,true)\r\n   }\r\n   validityChecker= (e) =>{\r\n     let error= hasError(e.target);\r\n     if(error) showError(e.target,error)\r\n     else removeError(e.target)\r\n   }\r\n   submitAuthForm = (event) =>{\r\n     event.preventDefault();\r\n     let form=document.querySelector('form');\r\n     let formData=formSerialize(form,{hash:true})\r\n     let authData={...formData,returnSecureToken:true}\r\n     if(!form.checkValidity()){\r\n       let inputs =Array.from(document.querySelectorAll('input'))\r\n       for(let input of inputs){\r\n         let errorStatus=hasError(input)\r\n         if(errorStatus) showError(input,errorStatus)\r\n         if(!errorStatus) removeError(input)\r\n       }\r\n       for(let input of inputs ){\r\n         if(hasError(input)) {\r\n           input.focus()\r\n           break;\r\n         }\r\n       }\r\n     }\r\n     if(form.checkValidity()) {\r\n       this.setState({authData:authData})\r\n       this.props.onSubmitAuth(authData,this.state.isSignUp)\r\n     }\r\n   }\r\n   render(){\r\n     const { classes } = this.props\r\n     const { isSignUp } = this.state\r\n     let form=(<Fragment>\r\n         <Paper className={classes.paper}>\r\n           <form className={classes.form} noValidate={true} onSubmit={(event)=>this.submitAuthForm(event)}>\r\n             <div className={classes.logoContainer}><div><img src={Logo} alt=\"mob store\"/></div></div>\r\n             <div className={classes.heading}>\r\n               <Typography variant=\"h5\" color=\"secondary\" align=\"center\" gutterBottom>\r\n                 {isSignUp?'We are so excited to have you in our community':'Welcome Back! Log into your Account' }\r\n               </Typography>\r\n             </div>\r\n             <div className={classes.authDetails}>\r\n               <TextField\r\n                 className={classes.textField}\r\n                 required\r\n                 id='email'\r\n                 label=\"Email\"\r\n                 type=\"email\"\r\n                 name=\"email\"\r\n                 variant=\"standard\"\r\n                 autoComplete=\"email\"\r\n                 fullWidth\r\n                 margin=\"normal\"\r\n                 inputProps={{\r\n                   pattern:emailPattern\r\n                 }}\r\n                 />\r\n               <TextField\r\n                 className={classes.textField}\r\n                 required\r\n                 id='password'\r\n                 label=\"Password\"\r\n                 type=\"password\"\r\n                 inputProps={{\r\n                   minLength:8\r\n                 }}\r\n                 name=\"password\"\r\n                 variant=\"standard\"\r\n                 autoComplete=\"password\"\r\n                 fullWidth\r\n                 margin=\"normal\"\r\n                 />\r\n               <Button type='submit' color='secondary' className={classes.button} variant=\"contained\" size=\"medium\">{isSignUp?'Sign Up':'Login'}</Button>\r\n             </div>\r\n             <div className={classes.authState}>\r\n                <Typography variant=\"body1\" color=\"error\" align=\"center\" style={{width:'100%'}} gutterBottom>{isSignUp?'Have an account?':\"Don't have an account?\"}</Typography>\r\n                <Button onClick={()=> this.changeSignUpState()} color='secondary' className={classes.button} variant=\"contained\" size=\"medium\">{isSignUp?'Login':'Sign Up'}</Button>\r\n             </div>\r\n           </form>\r\n         </Paper>\r\n     </Fragment>\r\n     )\r\n     let authForm = form\r\n     if (this.props.loading){\r\n       authForm=<Spinner/>\r\n     }\r\n     if (this.props.error) {\r\n       let errorMessage='An Error Ocurred please retry';\r\n       if(typeof this.props.error==='string'){\r\n         switch (this.props.error) {\r\n           case 'EMAIL_NOT_FOUND':\r\n            errorMessage='That email does not exist on our servers'\r\n            break;\r\n           case 'INVALID_EMAIL':\r\n            errorMessage='The email provided is invalid'\r\n            break;\r\n           case 'EMAIL_EXISTS':\r\n            errorMessage='That email exists on our servers already'\r\n            break;\r\n           default : errorMessage='An Error Ocurred please retry'\r\n         }\r\n       }\r\n       authForm=(\r\n         <Fragment>\r\n           <Typography\r\n             variant=\"body1\"\r\n             color=\"error\"\r\n             align=\"center\"\r\n             style={{width:'100%'}}\r\n             gutterBottom>{errorMessage}</Typography>\r\n           {form}\r\n         </Fragment>\r\n       )\r\n     }\r\n     return (\r\n       <React.Fragment>\r\n         {this.props.success?<Redirect to='/' />:null}\r\n       <Grid item\r\n         className={classes.container}\r\n         xs={11}\r\n         sm={8}\r\n         md={6}>\r\n          <div className={classes.auth}>\r\n              {authForm}\r\n           </div>\r\n       </Grid>\r\n     </React.Fragment>\r\n     )\r\n   }\r\n }\r\n const mapStateToProps = state=>({\r\n   loading:state.auth.loading,\r\n   error:state.auth.error,\r\n   success:state.auth.success\r\n })\r\n const mapDispatchToProps= dispatch=>({\r\n   onSubmitAuth: (authData,isSignUp) => dispatch(actions.authAsync(authData,isSignUp))\r\n })\r\n export default connect(mapStateToProps,mapDispatchToProps)(withStyles(styles)(Auth));\r\n"],"sourceRoot":""}